@page "/regions"
@using NorthwindBlazor.Models
@using NorthwindBlazor.Data
@inject DataManager DataManager
@inject IJSRuntime JS

<PageTitle>Regions</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3>Regions</h3>
        </div>
    </div>
    
    <div class="row">
        <!-- List Panel -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Region List</h5>
                    <div class="row">
                        <div class="col-md-8">
                            <InstantInputText @bind-Value="filterText" @bind-Value:event="oninput" @onkeyup="OnFilterTextChanged" class="form-control" placeholder="Filter regions..." />
                        </div>
                        <div class="col-md-4">
                            <button class="btn btn-primary w-100" @onclick="AddNew">Add New</button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0" style="max-height: 70vh; overflow-y: auto;">
                    <div class="list-group list-group-flush">
                        <Virtualize Items="filteredRegions" Context="region">
                            <div class="list-group-item list-group-item-action @(selectedRegion?.RegionId == region.RegionId ? "selected-item" : "")" 
                                 @onclick="() => SelectRegion(region)" style="cursor: pointer;">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@region.RegionDescription</h6>
                                </div>
                            </div>
                        </Virtualize>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Edit Panel -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>@(selectedRegion?.RegionId == 0 ? "Add New Region" : "Edit Region")</h5>
                </div>
                <div class="card-body">
                    @if (selectedRegion != null)
                    {
                        <EditForm Model="selectedRegion" OnValidSubmit="SaveRegion">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />
                            
                            <div class="mb-3">
                                <label for="regionDescription" class="form-label">Region Description</label>
                                <InstantInputText id="regionDescription" @bind-Value="selectedRegion.RegionDescription" class="form-control" />
                                <ValidationMessage For="() => selectedRegion.RegionDescription" />
                            </div>
                            
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-success">
                                    @(selectedRegion.RegionId == 0 ? "Add" : "Update")
                                </button>
                                @if (selectedRegion.RegionId != 0)
                                {
                                    <button type="button" class="btn btn-danger" @onclick="DeleteRegion">Delete</button>
                                }
                                <button type="button" class="btn btn-secondary" @onclick="ClearSelection">Clear</button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <p class="text-muted">Select a region to edit or click "Add New" to create one.</p>
                    }
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-warning alert-dismissible fade show mt-3" role="alert">
                    <strong>Notice:</strong> @errorMessage
                    @if (showErrorDetails && errorDetails.Any())
                    {
                        <hr />
                        <ul class="mb-0">
                            @foreach (var error in errorDetails)
                            {
                                <li>@error</li>
                            }
                        </ul>
                    }
                    <button type="button" class="btn-close" @onclick="ClearError"></button>
                    @if (errorDetails.Any() && !showErrorDetails)
                    {
                        <br />
                        <button type="button" class="btn btn-sm btn-outline-secondary mt-2" @onclick="ToggleErrorDetails">Show Details</button>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .selected-item {
        background-color: #f8f9fa !important;
    }
</style>

@code {
    private List<Region> regions = new();
    private List<Region> filteredRegions = new();
    private Region? selectedRegion;
    private string filterText = "";
    private string errorMessage = "";
    private List<string> errorDetails = new();
    private bool showErrorDetails = false;

    protected override Task OnInitializedAsync()
    {
        return LoadRegions();
    }

    private void OnFilterTextChanged()
    {
        ApplyFilter();
        StateHasChanged();
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrEmpty(filterText))
        {
            filteredRegions = regions.ToList();
        }
        else
        {
            var filter = filterText.ToLower();
            filteredRegions = regions.Where(r => 
                (r.RegionDescription?.ToLower().Contains(filter) == true)
            ).ToList();
        }
    }

    private Task LoadRegions()
    {
        var result = DataManager.GetAllRegions();
        if (result.Success)
        {
            regions = result.Data;
            ApplyFilter();
        }
        else
        {
            ShowError("Failed to load regions", result.ErrorMessages);
        }
        return Task.CompletedTask;
    }

    private void SelectRegion(Region region)
    {
        selectedRegion = new Region
        {
            RegionId = region.RegionId,
            RegionDescription = region.RegionDescription
        };
        ClearError();
    }

    private void AddNew()
    {
        selectedRegion = new Region { RegionId = 0, RegionDescription = "" };
        ClearError();
    }

    private Task SaveRegion()
    {
        if (selectedRegion == null) return Task.CompletedTask;

        ReturnType<Region> result;
        
        if (selectedRegion.RegionId == 0)
        {
            result = DataManager.AddRegion(selectedRegion);
        }
        else
        {
            result = DataManager.UpdateRegion(selectedRegion);
        }

        if (result.Success)
        {
            _ = LoadRegions();
            if (selectedRegion.RegionId == 0 && result.Data != null)
            {
                selectedRegion = result.Data;
            }
            ClearError();
        }
        else
        {
            ShowError($"Failed to {(selectedRegion.RegionId == 0 ? "add" : "update")} region", result.ErrorMessages);
        }
        
        return Task.CompletedTask;
    }

    private async Task DeleteRegion()
    {
        if (selectedRegion == null || selectedRegion.RegionId == 0) return;

        if (await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{selectedRegion.RegionDescription}'?"))
        {
            var result = DataManager.DeleteRegion(selectedRegion);
            if (result.Success)
            {
                _ = LoadRegions();
                selectedRegion = null;
                ClearError();
            }
            else
            {
                ShowError("Failed to delete region", result.ErrorMessages);
            }
        }
    }

    private void ClearSelection()
    {
        selectedRegion = null;
        ClearError();
    }

    private void ShowError(string message, List<string> details)
    {
        errorMessage = message;
        errorDetails = details ?? new List<string>();
        showErrorDetails = false;
    }

    private void ClearError()
    {
        errorMessage = "";
        errorDetails.Clear();
        showErrorDetails = false;
    }

    private void ToggleErrorDetails()
    {
        showErrorDetails = !showErrorDetails;
    }
}