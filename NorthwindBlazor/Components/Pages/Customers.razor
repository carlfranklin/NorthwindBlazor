@page "/customers"
@using NorthwindBlazor.Models
@using NorthwindBlazor.Data
@inject DataManager DataManager
@inject IJSRuntime JS

<PageTitle>Customers</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3>Customers</h3>
        </div>
    </div>
    
    <div class="row">
        <!-- List Panel -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Customer List</h5>
                    <div class="row">
                        <div class="col-md-8">
                            <InstantInputText @bind-Value="filterText" @bind-Value:event="oninput" @onkeyup="OnFilterTextChanged" class="form-control" placeholder="Filter customers..." />
                        </div>
                        <div class="col-md-4">
                            <button class="btn btn-primary w-100" @onclick="AddNew">Add New</button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0" style="max-height: 70vh; overflow-y: auto;">
                    <div class="list-group list-group-flush">
                        <Virtualize Items="filteredCustomers" Context="customer">
                            <div class="list-group-item list-group-item-action @(selectedCustomer?.CustomerId == customer.CustomerId ? "selected-item" : "")" 
                                 @onclick="() => SelectCustomer(customer)" style="cursor: pointer;">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@customer.CompanyName</h6>
                                    <small>@customer.CustomerId</small>
                                </div>
                                <p class="mb-1">@customer.ContactName (@customer.ContactTitle)</p>
                                <small>@customer.City, @customer.Country</small>
                            </div>
                        </Virtualize>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Edit Panel -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>@(string.IsNullOrWhiteSpace(originalCustomerId) ? "Add New Customer" : "Edit Customer")</h5>
                </div>
                <div class="card-body">
                    @if (selectedCustomer != null)
                    {
                        <EditForm Model="selectedCustomer" OnValidSubmit="SaveCustomer">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="customerId" class="form-label">Customer ID</label>
                                    <InstantInputText id="customerId" @bind-Value="selectedCustomer.CustomerId" class="form-control" maxlength="5" />
                                    <ValidationMessage For="() => selectedCustomer.CustomerId" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="companyName" class="form-label">Company Name</label>
                                    <InstantInputText id="companyName" @bind-Value="selectedCustomer.CompanyName" class="form-control" />
                                    <ValidationMessage For="() => selectedCustomer.CompanyName" />
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="contactName" class="form-label">Contact Name</label>
                                    <InstantInputText id="contactName" @bind-Value="selectedCustomer.ContactName" class="form-control" />
                                    <ValidationMessage For="() => selectedCustomer.ContactName" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="contactTitle" class="form-label">Contact Title</label>
                                    <InstantInputText id="contactTitle" @bind-Value="selectedCustomer.ContactTitle" class="form-control" />
                                    <ValidationMessage For="() => selectedCustomer.ContactTitle" />
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="address" class="form-label">Address</label>
                                <InstantInputText id="address" @bind-Value="selectedCustomer.Address" class="form-control" />
                                <ValidationMessage For="() => selectedCustomer.Address" />
                            </div>
                            
                            <div class="row">
                                <div class="col-md-4 mb-3">
                                    <label for="city" class="form-label">City</label>
                                    <InstantInputText id="city" @bind-Value="selectedCustomer.City" class="form-control" />
                                    <ValidationMessage For="() => selectedCustomer.City" />
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label for="region" class="form-label">Region</label>
                                    <InstantInputText id="region" @bind-Value="selectedCustomer.Region" class="form-control" />
                                    <ValidationMessage For="() => selectedCustomer.Region" />
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label for="postalCode" class="form-label">Postal Code</label>
                                    <InstantInputText id="postalCode" @bind-Value="selectedCustomer.PostalCode" class="form-control" />
                                    <ValidationMessage For="() => selectedCustomer.PostalCode" />
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-4 mb-3">
                                    <label for="country" class="form-label">Country</label>
                                    <InstantInputText id="country" @bind-Value="selectedCustomer.Country" class="form-control" />
                                    <ValidationMessage For="() => selectedCustomer.Country" />
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label for="phone" class="form-label">Phone</label>
                                    <InstantInputText id="phone" @bind-Value="selectedCustomer.Phone" class="form-control" />
                                    <ValidationMessage For="() => selectedCustomer.Phone" />
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label for="fax" class="form-label">Fax</label>
                                    <InstantInputText id="fax" @bind-Value="selectedCustomer.Fax" class="form-control" />
                                    <ValidationMessage For="() => selectedCustomer.Fax" />
                                </div>
                            </div>
                            
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-success">
                                    @(string.IsNullOrWhiteSpace(originalCustomerId) ? "Add" : "Update")
                                </button>
                                @if (!string.IsNullOrWhiteSpace(originalCustomerId))
                                {
                                    <button type="button" class="btn btn-danger" @onclick="DeleteCustomer">Delete</button>
                                }
                                <button type="button" class="btn btn-secondary" @onclick="ClearSelection">Clear</button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <p class="text-muted">Select a customer to edit or click "Add New" to create one.</p>
                    }
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-warning alert-dismissible fade show mt-3" role="alert">
                    <strong>Notice:</strong> @errorMessage
                    @if (showErrorDetails && errorDetails.Any())
                    {
                        <hr />
                        <ul class="mb-0">
                            @foreach (var error in errorDetails)
                            {
                                <li>@error</li>
                            }
                        </ul>
                    }
                    <button type="button" class="btn-close" @onclick="ClearError"></button>
                    @if (errorDetails.Any() && !showErrorDetails)
                    {
                        <br />
                        <button type="button" class="btn btn-sm btn-outline-secondary mt-2" @onclick="ToggleErrorDetails">Show Details</button>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .selected-item {
        background-color: #f8f9fa !important;
    }
</style>

@code {
    private List<Customer> customers = new();
    private List<Customer> filteredCustomers = new();
    private Customer? selectedCustomer;
    private string filterText = "";
    private string errorMessage = "";
    private List<string> errorDetails = new();
    private bool showErrorDetails = false;

    protected override Task OnInitializedAsync()
    {
        return LoadCustomers();
    }

    private void OnFilterTextChanged()
    {
        ApplyFilter();
        StateHasChanged();
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrEmpty(filterText))
        {
            filteredCustomers = customers.ToList();
        }
        else
        {
            var filter = filterText.ToLower();
            filteredCustomers = customers.Where(c => 
                (c.CustomerId?.ToLower().Contains(filter) == true) ||
                (c.CompanyName?.ToLower().Contains(filter) == true) ||
                (c.ContactName?.ToLower().Contains(filter) == true) ||
                (c.ContactTitle?.ToLower().Contains(filter) == true) ||
                (c.City?.ToLower().Contains(filter) == true) ||
                (c.Country?.ToLower().Contains(filter) == true)
            ).ToList();
        }
    }

    private Task LoadCustomers()
    {
        var result = DataManager.GetAllCustomers();
        if (result.Success)
        {
            customers = result.Data;
            ApplyFilter();
        }
        else
        {
            ShowError("Failed to load customers", result.ErrorMessages);
        }
        return Task.CompletedTask;
    }

    private void SelectCustomer(Customer customer)
    {
        selectedCustomer = new Customer
        {
            CustomerId = customer.CustomerId,
            CompanyName = customer.CompanyName,
            ContactName = customer.ContactName,
            ContactTitle = customer.ContactTitle,
            Address = customer.Address,
            City = customer.City,
            Region = customer.Region,
            PostalCode = customer.PostalCode,
            Country = customer.Country,
            Phone = customer.Phone,
            Fax = customer.Fax
        };
        originalCustomerId = customer.CustomerId;
        ClearError();
    }

    private void AddNew()
    {
        selectedCustomer = new Customer { CustomerId = "" };
        originalCustomerId = "";
        ClearError();
    }

    private Task SaveCustomer()
    {
        if (selectedCustomer == null) return Task.CompletedTask;

        if (string.IsNullOrWhiteSpace(selectedCustomer.CustomerId))
        {
            ShowError("Customer ID is required", new List<string> { "Please enter a valid Customer ID" });
            return Task.CompletedTask;
        }

        ReturnType<Customer> result;
        
        if (string.IsNullOrWhiteSpace(originalCustomerId))
        {
            // Adding new customer
            result = DataManager.AddCustomer(selectedCustomer);
        }
        else
        {
            // Updating existing customer
            result = DataManager.UpdateCustomer(selectedCustomer);
        }

        if (result.Success)
        {
            _ = LoadCustomers();
            if (result.Data != null)
            {
                originalCustomerId = selectedCustomer.CustomerId;
            }
            ClearError();
        }
        else
        {
            ShowError($"Failed to {(string.IsNullOrWhiteSpace(originalCustomerId) ? "add" : "update")} customer", result.ErrorMessages);
        }
        
        return Task.CompletedTask;
    }
    
    private string originalCustomerId = "";

    private async Task DeleteCustomer()
    {
        if (selectedCustomer == null || string.IsNullOrEmpty(selectedCustomer.CustomerId)) return;

        if (await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{selectedCustomer.CompanyName}'?"))
        {
            var result = DataManager.DeleteCustomer(selectedCustomer);
            if (result.Success)
            {
                _ = LoadCustomers();
                selectedCustomer = null;
                originalCustomerId = "";
                ClearError();
            }
            else
            {
                ShowError("Failed to delete customer", result.ErrorMessages);
            }
        }
    }

    private void ClearSelection()
    {
        selectedCustomer = null;
        originalCustomerId = "";
        ClearError();
    }

    private void ShowError(string message, List<string> details)
    {
        errorMessage = message;
        errorDetails = details ?? new List<string>();
        showErrorDetails = false;
    }

    private void ClearError()
    {
        errorMessage = "";
        errorDetails.Clear();
        showErrorDetails = false;
    }

    private void ToggleErrorDetails()
    {
        showErrorDetails = !showErrorDetails;
    }
}